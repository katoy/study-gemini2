@startuml
' skinparam monochrome true
skinparam classAttributeIconSize 0
hide empty members

package "Config" {
    class AgentConfig {
        + AGENT_DEFINITIONS: list[dict]
        + get_agent_options(): list[tuple[int, str]]
        + get_agent_class(agent_id: int): type | None
        + get_agent_params(agent_id: int): dict
        + get_agent_definition(agent_id: int): dict | None
    }

    class Color {
        + BLACK: tuple
        + WHITE: tuple
        + GREEN: tuple ' Note: Not currently used in provided gui.py
        + GRAY: tuple
        + BOARD: tuple
        + BACKGROUND: tuple
        + BUTTON: tuple
        + BUTTON_TEXT: tuple
        + DISABLED_TEXT: tuple
        + DARK_BLUE: tuple
        + LIGHT_BLUE: tuple
    }

    class Screen {
        + WIDTH: int
        + HEIGHT: int
        + BOARD_SIZE: int
        + BOARD_TOP_MARGIN: int
        + CELL_SIZE: int
        + BUTTON_MARGIN: int
        + BUTTON_VERTICAL_MARGIN: int
        + BUTTON_BORDER_WIDTH: int
        + BUTTON_BOTTOM_MARGIN: int
        + MESSAGE_ABOVE_TURN_MARGIN: int
        + TURN_MESSAGE_TOP_MARGIN: int
        + TURN_MESSAGE_BOTTOM_MARGIN: int
        + GAME_START_MESSAGE_TOP_MARGIN: int
        + RADIO_BUTTON_SIZE: int
        + RADIO_BUTTON_MARGIN: int
        + RADIO_Y_OFFSET: int
        + RADIO_Y_SPACING: int
        + RADIO_BUTTON_INNER_CIRCLE_RATIO: float
    }
}

package "Agents" {
    abstract class Agent {
        + {abstract} play(game: Game): tuple[int, int] | None
    }

    class FirstAgent extends Agent {
        + play(game: Game): tuple[int, int] | None
    }

    class RandomAgent extends Agent {
        + play(game: Game): tuple[int, int] | None
    }

    class GainAgent extends Agent {
        + play(game: Game): tuple[int, int] | None
    }

    class MonteCarloTreeSearchAgent extends Agent {
        - iterations: int
        - time_limit_ms: int
        - exploration_weight: float
        + __init__(iterations: int, time_limit_ms: int, exploration_weight: float)
        + play(game: Game): tuple[int, int] | None
        ' - _select_node(node: Node): Node ' Implementation details hidden
        ' - _expand_node(node: Node, game: Game) ' Implementation details hidden
        ' - _simulate(game: Game): int ' Implementation details hidden
        ' - _backpropagate(node: Node, result: int) ' Implementation details hidden
        ' - _get_best_move(node: Node): tuple[int, int] | None ' Implementation details hidden
    }

    ' Removed Node class for simplicity, as it's an internal detail of MCTS
    ' class Node { ... }
    ' MonteCarloTreeSearchAgent *-- Node : uses
}


package "Reversi" {
    class Game {
        - board: Board
        - turn: int
        - game_over: bool
        - board_size: int
        - history: list[tuple]
        - history_index: int
        - agents: dict[int, Agent | None]
        - message: str
        + __init__(board_size: int)
        + reset()
        + switch_turn()
        + check_game_over()
        + get_winner(): int
        + place_stone(row: int, col: int): bool
        + get_valid_moves(): list
        + get_board(): list[list[int]]
        + get_board_size(): int
        + set_players(black_player_id: int, white_player_id: int)
        + create_agent(agent_id: int): Agent | None
        + set_message(message: str)
        + get_message(): str
        + replay(index: int): bool
        + history_top(): bool
        + history_last(): bool
        + get_current_history(): tuple | None
    }

    class Board {
        - board_size: int
        - board: list[list[int]]
        + __init__(board_size: int)
        + is_valid_move(row: int, col: int, turn: int): bool
        + get_valid_moves(turn: int): list
        + place_stone(row: int, col: int, turn: int): bool
        + count_stones(): tuple[int, int]
        + get_board(): list[list[int]]
        + get_flipped_stones(row: int, col: int, turn: int): list
    }

    class GameGUI {
        - screen_width: int
        - screen_height: int
        - screen: pygame.Surface
        - cell_size: int
        - font: pygame.font.Font
        - agent_options: list[tuple[int, str]]
        + __init__(screen_width: int, screen_height: int)
        - _load_font(): pygame.font.Font
        - _calculate_board_rect(): pygame.Rect
        - _draw_board_background(board_rect: pygame.Rect)
        - _draw_board_grid(board_rect: pygame.Rect)
        - _draw_stones(board: list, board_rect: pygame.Rect)
        - _draw_stone(board_rect: pygame.Rect, row: int, col: int, color: tuple)
        + draw_board(game: Game)
        - _draw_stone_count(game: Game, board_rect: pygame.Rect)
        - _draw_text_with_position(text: str, color: tuple, pos: tuple, is_right_aligned: bool)
        + draw_valid_moves(game: Game)
        + draw_message(message: str, is_game_start: bool, is_game_over: bool)
        - _get_message_y_position(is_game_start: bool, is_game_over: bool): int
        + get_clicked_cell(pos: tuple): tuple[int, int]
        + draw_stone_animation(game: Game, row: int, col: int, color: tuple)
        + draw_flip_animation(game: Game, flipped_stones: list, color: tuple)
        + draw_start_button(): pygame.Rect
        + draw_restart_button(game_over: bool): pygame.Rect
        + draw_reset_button(game_over: bool): pygame.Rect
        - _calculate_button_rect(is_start_button: bool, game_over: bool, is_reset_button: bool): pygame.Rect
        - _calculate_button_height(): int
        - _draw_button(button_rect: pygame.Rect, text: str): pygame.Rect
        - _draw_button_border(button_rect: pygame.Rect)
        + is_button_clicked(pos: tuple, button_rect: pygame.Rect): bool
        + draw_radio_button(pos: tuple, selected: bool, enabled: bool)
        + draw_text(text: str, pos: tuple, enabled: bool)
        + draw_player_settings(game: Game, player_settings_top: int, enabled: bool)
        - _calculate_player_settings_height(): int
        - _calculate_player_settings_top(): int
        + draw_turn_message(game: Game)
        - _calculate_turn_message_center_y(): int
    }

    component MainScript as "main.py" {
    }

    ' --- Relationships ---
    Game "1" *-- "1" Board : contains
    Game "1" *-- "0..*" Agent : manages

    GameGUI ..> Game : uses
    GameGUI ..> Color : uses
    GameGUI ..> Screen : uses
    GameGUI ..> AgentConfig : uses

    Game ..> AgentConfig : uses

    MainScript ..> Game : uses
    MainScript ..> GameGUI : uses
    MainScript ..> AgentConfig : uses
}

' --- Package Dependencies ---
Reversi ..> Config
Reversi ..> Agents

@enduml
